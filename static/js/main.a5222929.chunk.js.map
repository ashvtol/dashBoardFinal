{"version":3,"sources":["logo.svg","App.js","xticks.js","yticks.js","parallelCoordinates.js","synchronizedXticks.js","xtickScatter.js","customtooltip.js","bubbleXTick.js","bubbleYTick.js","serviceWorker.js","index.js"],"names":["module","exports","composedChartData","CustomizedXAxisTick","this","props","x","y","payload","stroke","transform","dy","textAnchor","fill","style","fontSize","value","React","Component","CustomizedYAxisTick","Math","abs","sign","toFixed","theme","background","axis","domain","line","strokeWidth","strokeLinecap","lineOpacity","ticks","text","legend","grid","legends","labels","markers","lineColor","lineStrokeWidth","textColor","dots","tooltip","container","color","borderRadius","boxShadow","padding","basic","whiteSpace","display","alignItems","table","tableCell","MyParallelCoordinates","redactedData","census","slice","index","countyList","i","length","push","getCountyList","data","colors","scheme","variables","key","type","values","ticksPosition","legendPosition","legendOffset","tickValues","min","max","margin","top","right","bottom","left","animate","motionStiffness","motionDamping","SynchronizedXticks","substring","CustomizedXAxisTickScatter","CustomizedToolTip","active","label","className","County","BubbleXTick","labelValue","Number","dx","convertValues","BubbleYTick","latestData","nyScatterData","caScatterData","nyScatterDataDeaths","caScatterDataDeaths","filteredData","scatterPlotDataArray","mds_corr","scatterPlotDataArray1","cList","grayList","itrLen","weather_cases","segregateCasesData","weather_deaths","segregateDeathData","random","toString","generateColors","filterData","App","changeScatterIndex","newIndex","setState","p","n","scatterIndex","getMaxValue","itrArray","state","countyData","reduce","prevState","maxPositive","maxDeath","maxTest","getCountyData","county","reverse","handleClick","prev","current","countyVar","v","brushIndex","highlight","COLORS","update","$set","console","log","resetColor","changeIndex","handleColor","count","syncHt","syncWt","bind","id","height","width","interval","dataKey","tick","minTickGap","offset","angle","layout","verticalAlign","align","wrapperStyle","paddingBottom","vertical","name","barSize","onClick","dot","position","duration","end","syncId","unit","cursor","strokeDasharray","shape","tickLine","range","content","map","entry","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5222929.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport logo from './logo.svg';\nimport './App.css';\nimport LineChart from \"recharts/lib/chart/LineChart\";\nimport CartesianGrid from \"recharts/lib/cartesian/CartesianGrid\";\nimport XAxis from \"recharts/lib/cartesian/XAxis\";\nimport YAxis from \"recharts/lib/cartesian/YAxis\";\nimport Tooltip from \"recharts/lib/component/Tooltip\";\nimport Legend from \"recharts/lib/component/Legend\";\nimport Line from \"recharts/lib/cartesian/Line\";\nimport census from \"./census.json\";\nimport deathData from \"./death_data.json\";\nimport CustomizedXAxisTick from \"./xticks\";\nimport CustomizedYAxisTick from \"./yticks\";\nimport BarChart from \"recharts/lib/chart/BarChart\";\nimport Bar from \"recharts/lib/cartesian/Bar\";\nimport Text from \"recharts/lib/component/Text\";\nimport MyParallelCoordinates from \"./parallelCoordinates\";\nimport './style.css'\nimport Brush from \"recharts/lib/cartesian/Brush\";\nimport weather_cases from \"./weather_cases\";\nimport weather_deaths from \"./weather_deaths\";\nimport ScatterChart from \"recharts/lib/chart/ScatterChart\";\nimport Scatter from \"recharts/lib/cartesian/Scatter\";\nimport Area from \"recharts/lib/cartesian/Area\";\nimport AreaChart from \"recharts/lib/chart/AreaChart\";\nimport SynchronizedXticks from \"./synchronizedXticks\";\nimport ComposedChart from \"recharts/lib/chart/ComposedChart\";\nimport mds_corr from \"./mds_corr.json\";\nimport CustomizedXAxisTickScatter from \"./xtickScatter\";\nimport CustomizedToolTip from \"./customtooltip\";\nimport Cell from \"recharts/lib/component/Cell\";\n// import countUp from './countUp';\nimport CountUp from \"react-countup\";\nimport update from 'immutability-helper';\nimport ZAxis from \"recharts/lib/cartesian/ZAxis\";\nimport BubbleXTick from \"./bubbleXTick\";\nimport BubbleYTick from \"./bubbleYTick\";\n// import {CountUp} from \"countup.js\";\n\n\n// There are 73 counties in total.\nlet latestData = census.slice(0, 72);\nlet mdsData = mds_corr;\nlet nyScatterData = [];\nlet caScatterData = [];\nlet nyScatterDataDeaths = [];\nlet caScatterDataDeaths = [];\nlet composedChartData;\nlet filteredData = [];\nlet scatterPlotDataArray = [[nyScatterData, caScatterData, 'MaximumTemperature', 'avgCases', 'Cases vs Temperature'],\n    [nyScatterDataDeaths, caScatterDataDeaths, 'MaximumTemperature', 'deaths', 'Death vs Temperature'],\n    [mdsData, '', 'PCA 1', 'PCA 2', 'MDS Correlation']];\nlet scatterPlotDataArray1 = [[nyScatterData, caScatterData, 'MaximumTemperature', 'Cases', 'Cases vs Temperature'],\n    [nyScatterDataDeaths, caScatterDataDeaths, 'MaximumTemperature', 'Deaths', 'Death vs Temperature'],\n    [mdsData, '', 'PCA 1', 'PCA 2', 'MDS Correlation']];\n\nlet cList = {};\nlet grayList = {};\n// let redactedData = census.slice(0, 62);\n// let countyList = [];\n// function getCountyList(redactedData) {\n//\n//     for(let i=0; i<redactedData.length; i++){\n//         countyList.push(redactedData[i]['County']);\n//     }\n//     console.log(countyList);\n// }\n\nfunction filterData(data) {\n    for (let i = 0; i < 62; i++) {\n        if (data[i]['Cumulative Number of Tests Performed'] > 10000 && data[i]['deaths'] > 0) {\n            filteredData.push(data[i]);\n        } else if (data[i]['County'] === 'Queens') {\n            filteredData.push(data[i]);\n        }\n    }\n}\n\nasync function getDeaths(str, deathData) {\n    let index = 0;\n    let match = false;\n    for (let i = 0; i < deathData.length; i++) {\n        if (deathData[i]['Total Deaths'].length !== 0 && deathData[i]['County'] === str) {\n            index = i;\n            match = true;\n            break;\n        }\n    }\n    // console.log(deathData[index]['Total Deaths'])\n    if (match && deathData[index]['Total Deaths'].length !== 0) {\n        return parseFloat(deathData[index]['Total Deaths'].replace(/,/g, ''));\n    }\n}\n\n// function filterTop10(data, deathData) {\n//     let filteredData = []\n//     let dict = {}\n//     for (let i = 0; i < data.length; i++) {\n//         if (data[i]['Total Number of Tests Performed'] > 1500) {\n//             if (!(data[i]['County'] in dict)) {\n//                 dict[data[i]['County']] = 1;\n//                 if (getDeaths(data[i]['County'], deathData) > 0) {\n//                     data[i]['deaths'] = getDeaths(data[i]['County'], deathData)\n//                 }\n//                 filteredData.push(data[i]);\n//             }\n//\n//         }\n//     }\n//     filteredData = filteredData.sort();\n//     return filteredData;\n// }\n\n// console.log(latestData)\n// function handleClick(data, index) {\n//     console.log(\"Index = \", data);\n// }\n\nfunction generateColors() {\n    for (let i = 0; i < latestData.length; i++) {\n        cList[latestData[i]['County']] = \"#\" + ((1 << 24) * Math.random() | 0).toString(16);\n        grayList[latestData[i]['County']] = \"gray\";\n    }\n    // console.log(cList);\n}\n\nfunction segregateCasesData() {\n    let itrLen = weather_cases.length;\n    for (let i = 0; i < itrLen; i++) {\n        if (weather_cases[i]['state'] === 'New York') {\n            nyScatterData.push(weather_cases[i]);\n        } else {\n            caScatterData.push(weather_cases[i]);\n        }\n    }\n}\n\nfunction segregateDeathData() {\n    let itrLen = weather_deaths.length;\n    for (let i = 0; i < itrLen; i++) {\n        if (weather_deaths[i]['state'] === 'New York') {\n            nyScatterDataDeaths.push(weather_deaths[i]);\n        } else {\n            caScatterDataDeaths.push(weather_deaths[i]);\n        }\n    }\n}\n\nsegregateCasesData();\nsegregateDeathData();\ngenerateColors();\nfilterData(latestData);\ncomposedChartData = filteredData;\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 40,\n            count: 0,\n            // filteredTop: filterTop10(latestData, deathData),\n            syncHt: 190,\n            syncWt: 400,\n            countyVar: \"Albany\",\n            countyData: this.getCountyData(census, \"Albany\"),\n            scatterIndex: 1,\n            maxPositive: 98,\n            maxDeath: 118,\n            maxTest: 626,\n            COLORS: cList,\n            highlight: false,\n            brushIndex: null\n        };\n        this.changeScatterIndex = this.changeScatterIndex.bind(this);\n        this.changeIndex = this.changeIndex.bind(this);\n        this.getMaxValue = this.getMaxValue.bind(this);\n        this.getCountyData = this.getCountyData.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    changeScatterIndex = (newIndex) => {\n        this.setState((p, n) => ({\n            scatterIndex: newIndex\n        }));\n\n    }\n\n    getMaxValue = () => {\n        const itrArray = ['New Positives', 'deaths', 'Total Number of Tests Performed'];\n        for (let i = 0; i < itrArray.length; i++) {\n\n            let value = this.state.countyData.reduce(\n                (max, x) => (x[itrArray[i]] > max ? x[itrArray[i]] : max),\n                this.state.countyData[0][itrArray[i]]\n            );\n\n            if (i === 0) {\n                this.setState((prevState, props) => ({\n                    maxPositive: value\n                }));\n\n            } else if (i === 1) {\n                this.setState((prevState, props) => ({\n                    maxDeath: value\n                }));\n\n            } else {\n                this.setState((prevState, props) => ({\n                    maxTest: value\n                }));\n\n            }\n\n        }\n    }\n\n    getCountyData = (data, county) => {\n        let filteredData = [];\n        for (let i = 0; i < data.length - 1; i++) {\n            if (data[i]['County'] === county) {\n                filteredData.push(data[i]);\n            }\n        }\n        // console.log(\"Filtered Data\", filteredData[0]['deaths']);\n        return filteredData.reverse();\n    }\n\n    handleClick = (data, index) => {\n        // console.log(data['County']);\n        this.setState((prev, current) => ({\n            countyData: this.getCountyData(census, data['County']),\n            countyVar: data['County']\n        }), () => {\n            this.getMaxValue();\n            this.setState((p, v) => ({\n                brushIndex: filteredData[index]['County']\n            }), () => {\n                if (this.state.highlight) {\n                    this.setState({\n                        COLORS: update(this.state.COLORS, {[this.state.brushIndex]: {$set: 'red'}})\n                    }, () => {\n                        console.log(\"BrushIndex\", this.state.brushIndex, this.state.COLORS);\n                    });\n                } else {\n                    this.setState({\n                        COLORS: grayList,\n                        highlight: true,\n                    }, () => {\n                        this.setState({\n                            COLORS: update(this.state.COLORS, {[this.state.brushIndex]: {$set: 'red'}})\n                        });\n                        console.log(\"BrushIndex\", this.state.brushIndex, this.state.COLORS);\n                    });\n                }\n\n            });\n\n\n        });\n\n\n    }\n\n    resetColor = () => {\n        this.setState({\n            COLORS: cList,\n            highlight: false\n        }, () => {\n            console.log(\"Selection Reset Completed\");\n        })\n    }\n\n    changeIndex = (newIndex) => {\n\n        this.setState((p, n) => ({\n            index: newIndex\n        }));\n\n    }\n\n    handleColor = (data, index) => {\n        console.log(\"Color\", data, index, this.state.COLORS);\n        // let newCol = org_COLORS;\n        // newCol[index] = '#00C00F';\n        this.setState({\n            COLORS: update(this.state.COLORS, {[this.state.brushIndex]: {$set: 'red'}})\n        });\n\n\n        // this.setState(prevState => ({\n        //     items: {\n        //         ...prevState.COLORS,\n        //         [prevState.COLORS[index]]: 'red',\n        //     },\n        // }));\n    }\n\n\n    render() {\n        const range = [50, 1000];\n        // let filteredTop = filterTop10(latestData, deathData);\n        // getCountyList(redactedData);\n        return (\n            <div id={\"react-components\"} style={{height: \"350px\", width: \"500px\"}}>\n                <div id={\"header\"}>\n                    <div id={\"headerContent\"}>\n                        COVID-19 Data Analysis - New York\n                    </div>\n                </div>\n\n                <div id={\"ComposedChart0\"} className={\".recharts-legend-wrapper_custom\"}>\n                    <ComposedChart width={500} height={280} data={composedChartData}\n                                   margin={{top: 10, right: 30, bottom: 50, left: 80}}>\n                        <XAxis interval={0} dataKey=\"County\" tick={<CustomizedXAxisTick/>} minTickGap={1}/>\n                        <YAxis label={<Text x={40}\n                                            y={-30}\n                                            dx={50}\n                                            dy={150}\n                                            offset={0}\n                                            style={{fontSize: '14px', fill: 'white'}}\n                                            angle={-90}>Count</Text>} tick={<CustomizedYAxisTick/>}/>\n                        <Tooltip/>\n                        <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" wrapperStyle={{\n                            paddingBottom: \"20px\"\n                        }}/>\n                        <CartesianGrid vertical={false} stroke={'gray'}/>\n\n                        <Bar name={\"Tested\"} dataKey='Cumulative Number of Tests Performed' barSize={10} fill='#954535'\n                             onClick={this.handleClick}/>\n                        {/*<Area type=\"monotone\" dataKey=\"deaths\" fill=\"#8884d8\" stroke=\"red\" />*/}\n                        <Area type='monotone' dataKey='Cumulative Number of Positives' stroke='#82ca9d' fill={\"#82ca9d\"}\n                              strokeWidth={1}\n                              dot={false} />\n                    </ComposedChart>\n                    <p id={\"CountyName\"}>County: {this.state.countyVar}</p>\n                    {/*Synchronised line charts*/}\n                    <div id={\"LineChart0\"}>\n                        <p style={{position: \"relative\", left: \"60px\", fontSize: \"12px\"}}>Daily Confirmed Positive</p>\n                        <div className={\"maxSat\"} style={{color: \"#82ca9d\"}}><CountUp duration={3}\n                                                                                      end={this.state.maxPositive}/>\n                        </div>\n                        <AreaChart width={this.state.syncWt} height={this.state.syncHt} data={this.state.countyData}\n                                   syncId=\"anyId\"\n                                   margin={{top: 10, right: 30, left: 0, bottom: 0}}>\n\n                            <CartesianGrid vertical={false} stroke={'gray'}/>\n                            <XAxis dataKey=\"Test Date\" tick={<SynchronizedXticks/>}/>\n                            <YAxis tick={<CustomizedYAxisTick/>}/>\n                            <Tooltip style={{fontSize: 10}}/>\n                            <Area type='monotone' dataKey='New Positives' stroke='#82ca9d' fill='#82ca9d'\n                                  dot={false}/>\n                        </AreaChart>\n                    </div>\n\n                    <div id={\"LineChart1\"}>\n                        <p style={{position: \"relative\", left: \"60px\", fontSize: \"12px\"}}>Commulative Confirmed Deaths</p>\n                        <div className={\"maxSat\"}><CountUp duration={3} end={this.state.maxDeath}/></div>\n                        <AreaChart width={this.state.syncWt} height={this.state.syncHt} data={this.state.countyData}\n                                   syncId=\"anyId\"\n                                   margin={{top: 10, right: 30, left: 0, bottom: 0}}>\n                            <CartesianGrid vertical={false} stroke={'gray'}/>\n                            <XAxis dataKey=\"Test Date\" tick={<SynchronizedXticks/>}/>\n                            <YAxis tick={<CustomizedYAxisTick/>}/>\n                            <Tooltip style={{fontSize: 10}}/>\n                            <Area type='monotone' dataKey='deaths' stroke='red' fill='#7f1734' dot={false}/>\n                        </AreaChart>\n                    </div>\n\n                    <div id={\"LineChart2\"}>\n                        <p style={{position: \"relative\", left: \"60px\", fontSize: \"12px\"}}>Daily Tests</p>\n                        <div className={\"maxSat\"} style={{color: \"#0892d0\"}}><CountUp duration={3}\n                                                                                      end={this.state.maxTest}/></div>\n                        <AreaChart width={this.state.syncWt} height={this.state.syncHt + 20}\n                                   data={this.state.countyData}\n                                   syncId=\"anyId\"\n                                   margin={{top: 10, right: 30, left: 0, bottom: 0}}>\n                            <CartesianGrid vertical={false} stroke={'gray'}/>\n                            <XAxis dataKey=\"Test Date\" tick={<SynchronizedXticks/>}/>\n                            <YAxis tick={<CustomizedYAxisTick/>}/>\n                            <Tooltip/>\n\n                            <Brush\n                                height={20}\n                                left={-100}\n                                stroke=\"gray\">\n                                <AreaChart>\n                                    <Area dataKey=\"Total Number of Tests Performed\" fill=\"#0892d0\"/>\n                                </AreaChart>\n                            </Brush>\n\n                            <Area type='monotone' dataKey='Total Number of Tests Performed' stroke='#0892d0'\n                                  fill='#0892d0'/>\n                        </AreaChart></div>\n                </div>\n\n                <div id={\"scatterPlot0\"}>\n                    <p style={{\n                        position: \"relative\",\n                        top: '10px',\n                        left: \"60px\",\n                        fontSize: \"12px\"\n                    }}>{scatterPlotDataArray[this.state.scatterIndex][4]}</p>\n                    <ScatterChart width={425} height={450} margin={{top: 20, right: 20, bottom: 20, left: 20}}>\n                        <XAxis type=\"number\" dataKey={scatterPlotDataArray[this.state.scatterIndex][2]}\n                               name='Temperature' unit='F'\n                               tick={<CustomizedXAxisTickScatter/>}/>\n                        <YAxis label={<Text x={-10}\n                                            y={75}\n                                            dx={50}\n                                            dy={150}\n                                            offset={0}\n                                            style={{fontSize: '12px', fill: 'white'}}\n                                            angle={-90}>{scatterPlotDataArray1[this.state.scatterIndex][3]}</Text>}\n                            type=\"number\" dataKey={scatterPlotDataArray[this.state.scatterIndex][3]}\n                               tick={<CustomizedYAxisTick/>}/>\n                        {/*<ZAxis dataKey={'z'} range={[60, 400]} name='score' unit='km'/>*/}\n                        <CartesianGrid stroke={\"gray\"}/>\n                        <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                        <Legend verticalAlign=\"bottom\" align=\"center\"/>\n                        <Scatter name='New York' data={scatterPlotDataArray[this.state.scatterIndex][0]} fill='#8884d8'\n                                 shape=\"star\"/>\n                        {this.state.scatterIndex !== 2 &&\n                        <Scatter name='California' data={scatterPlotDataArray[this.state.scatterIndex][1]}\n                                 fill='#82ca9d' shape=\"triangle\"/>}\n                    </ScatterChart>\n                    <div id={\"ParallelButtons0\"}>\n                        <button className={\"btn\"} onClick={() => this.changeScatterIndex(0)}>Cases Vs. Temp</button>\n                        <button className={\"btn\"} onClick={() => this.changeScatterIndex(1)}>Death Vs. Temp</button>\n                        <button className={\"btn\"} onClick={() => this.changeScatterIndex(2)}>MDS</button>\n                    </div>\n                </div>\n\n                <div id={\"parallelCoordinates\"}>\n                    <div style={{\n                        position: \"absolute\",\n                        top: '12px',\n                        left: \"10px\",\n                        fontSize: \"12px\"\n                    }}>{'Parallel Coordinates'}</div>\n                    {<MyParallelCoordinates index={this.state.index}/>}\n                    <div id={\"ParallelButtons1\"}>\n                        <button className={\"btn\"} onClick={() => this.changeIndex(40)}>40 Counties</button>\n                        <button className={\"btn\"} onClick={() => this.changeIndex(50)}>50 Counties</button>\n                        <button className={\"btn\"} onClick={() => this.changeIndex(63)}>All Counties</button>\n                    </div>\n                </div>\n\n\n                <div id={\"bubbleChart\"}>\n                    <p style={{\n                        position: \"relative\",\n                        top: '10px',\n                        left: \"60px\",\n                        fontSize: \"12px\"\n                    }}> Population vs. Income vs. Cases </p>\n                    <ScatterChart width={400} height={450} margin={{top: 20, right: 20, bottom: 20, left: 20}}>\n                        <XAxis label={<Text x={210}\n                                            y={430}\n                                            dx={0}\n                                            dy={10}\n                                            offset={0}\n                                            style={{fontSize: '12px', fill: 'white'}}\n                                            angle={0}>Income</Text>}\n                               type=\"number\" dataKey=\"Median Income\" name=\"Median Income\" tickLine={false}\n                               tick={<BubbleXTick/>}/>\n                        <YAxis label={<Text x={-10}\n                                            y={90}\n                                            dx={50}\n                                            dy={150}\n                                            offset={0}\n                                            style={{fontSize: '12px', fill: 'white'}}\n                                            angle={-90}>Population</Text>} type=\"number\" dataKey=\"Population\"\n                               tickLine={false}\n                               tick={<BubbleYTick/>}/>\n\n                        <ZAxis type=\"number\" dataKey=\"Cumulative Number of Positives\" range={range}/>\n                        <CartesianGrid stroke={\"gray\"}/>\n                        <Tooltip content={<CustomizedToolTip/>}/>\n                        <Scatter data={latestData} name='Bubble' fill='#8884d8'>\n                            {\n                                latestData.map((entry, index) => <Cell\n                                    fill={this.state.COLORS[latestData[index]['County']]}/>)\n                            }\n                        </Scatter>\n\n                    </ScatterChart>\n                    <div id={\"bubbleButton\"}>\n                        <button className={\"btn\"} onClick={this.resetColor}>Reset Selection</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\n\nexport default class CustomizedXAxisTick extends React.Component {\n    render() {\n        const {x, y, stroke, payload} = this.props;\n\n        return (\n            <g transform={`translate(${x},${y})`}>\n                <text x={0} y={0} dy={10} textAnchor=\"end\" fill=\"white\" transform=\"rotate(-45)\" style={{\n                    fontSize: '14px'\n                }}>{payload.value}</text>\n            </g>\n        );\n    }\n};\n\n","import React from \"react\";\n\nexport default class CustomizedYAxisTick extends React.Component {\n    render() {\n        const {x, y, stroke, payload} = this.props;\n\n        return (\n            <g transform={`translate(${x},${y})`}>\n                <text x={0} y={0} dy={10} textAnchor=\"end\" fill=\"white\"  style={{\n                    fontSize: '12px'\n                }}>{\n                    Math.abs(payload.value) > 999 ? Math.sign(payload.value)*((Math.abs(payload.value)/1000).toFixed(1)) + 'K' : Math.sign(payload.value)*Math.abs(payload.value)\n                }</text>\n            </g>\n        );\n    }\n};\n\n","import React from 'react';\nimport {ResponsiveParallelCoordinates} from '@nivo/parallel-coordinates'\nimport census from \"./census.json\";\n\n\nconst defaultTextColor = \"white\"\nconst defaultFontSize = 11\nconst theme = {\n    background: 'transparent',\n    axis: {\n        domain: {\n            line: {\n                stroke: 'rgb(136, 158, 174)',\n                strokeWidth: 1,\n                strokeLinecap: 'square',\n                lineOpacity: 1,\n            },\n        },\n        ticks: {\n            line: {\n                stroke: '#777',\n                strokeWidth: 1,\n            },\n            text: {\n                fill: defaultTextColor,\n                fontSize: defaultFontSize,\n            },\n        },\n        legend: {\n            text: {\n                fill: defaultTextColor,\n                fontSize: defaultFontSize,\n            },\n        },\n    },\n    grid: {\n        line: {\n            stroke: '#ddd',\n            strokeWidth: 2,\n        },\n    },\n    legends: {\n        text: {\n            fill: defaultTextColor,\n            fontSize: defaultFontSize,\n        },\n    },\n    labels: {\n        text: {\n            fill: defaultTextColor,\n            fontSize: defaultFontSize,\n        },\n    },\n    markers: {\n        lineColor: '#000',\n        lineStrokeWidth: 1,\n        textColor: defaultTextColor,\n        fontSize: defaultFontSize,\n    },\n    dots: {\n        text: {\n            fill: defaultTextColor,\n            fontSize: defaultFontSize,\n        },\n    },\n    tooltip: {\n        container: {\n            background: 'white',\n            color: 'grey',\n            fontSize: '10px',\n            borderRadius: '2px',\n            boxShadow: '0 1px 2px rgba(0, 0, 0, 0.25)',\n            padding: '2px 2px',\n        },\n        basic: {\n            whiteSpace: 'pre',\n            display: 'flex',\n            alignItems: 'center',\n        },\n        table: {},\n        tableCell: {\n            padding: '3px 5px',\n        },\n    },\n}\n\n\nclass MyParallelCoordinates extends React.Component {\n    render() {\n        let redactedData = census.slice(0, this.props.index);\n        let countyList = [];\n\n        function getCountyList(redactedData) {\n\n            for (let i = 0; i < redactedData.length; i++) {\n                if (redactedData[i]['Cumulative Number of Positives'] > 200) {\n                    countyList.push(redactedData[i]['County']);\n                }\n\n            }\n        }\n\n        getCountyList(redactedData);\n\n        return (\n            <ResponsiveParallelCoordinates\n                data={redactedData}\n                theme={theme}\n                colors={{ scheme: 'yellow_orange_red' }}\n                strokeWidth={1}\n                lineOpacity={1}\n                variables={[\n                    {\n                        key: 'County',\n                        type: 'point',\n                        padding: 0,\n                        values: countyList,\n                        ticksPosition: 'before',\n                        legend: 'County',\n                        legendPosition: 'start',\n                        legendOffset: 10,\n                        tickValues: 10\n                    },\n                    {\n                        key: 'Population',\n                        type: 'linear',\n                        min: 'auto',\n                        max: 'auto',\n                        ticksPosition: 'before',\n                        legend: 'Population',\n                        legendPosition: 'start',\n                        legendOffset: 10,\n                    },\n                    {\n                        key: 'Cumulative Number of Tests Performed',\n                        type: 'linear',\n                        min: 0,\n                        max: 'auto',\n                        ticksPosition: 'before',\n                        legend: 'Total Test',\n                        legendPosition: 'start',\n                        legendOffset: 10\n                    },\n                    {\n                        key: 'Cumulative Number of Positives',\n                        type: 'linear',\n                        min: 0,\n                        max: 'auto',\n                        ticksPosition: 'before',\n                        legend: 'Total Positives',\n                        legendPosition: 'start',\n                        legendOffset: 10\n                    },\n                    {\n                        key: 'deaths',\n                        type: 'linear',\n                        min: 0,\n                        max: 'auto',\n                        ticksPosition: 'before',\n                        legend: 'Total Deaths',\n                        legendPosition: 'start',\n                        legendOffset: 10\n                    },\n                    {\n                        key: 'Median Income',\n                        type: 'linear',\n                        min: 0,\n                        max: 'auto',\n                        ticksPosition: 'before',\n                        legend: 'Median Income',\n                        legendPosition: 'start',\n                        legendOffset: 10\n                    }\n                ]}\n                // colors={{\"scheme\":\"yellow_orange_red\"}}\n                margin={{top: 50, right: 60, bottom: 50, left: 80}}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={12}\n            />)\n    }\n}\n\nexport default MyParallelCoordinates;","import React from \"react\";\r\n\r\nexport default class SynchronizedXticks extends React.Component {\r\n    render() {\r\n        const {x, y, stroke, payload} = this.props;\r\n\r\n        return (\r\n            <g transform={`translate(${x},${y})`}>\r\n                <text x={10} y={0} dy={10} textAnchor=\"end\" fill=\"white\" transform=\"rotate(0)\" style={{\r\n                    fontSize: '12px'\r\n                }}>{payload.value.substring(0, payload.value.length - 5)}</text>\r\n            </g>\r\n        );\r\n    }\r\n};\r\n\r\n","import React from \"react\";\n\nexport default class CustomizedXAxisTickScatter extends React.Component {\n    render() {\n        const {x, y, stroke, payload} = this.props;\n\n        return (\n            <g transform={`translate(${x},${y})`}>\n                <text x={10} y={0} dy={10} textAnchor=\"end\" fill=\"white\" style={{\n                    fontSize: '12px'\n                }}>{payload.value + 'F'}</text>\n            </g>\n        );\n    }\n};\n\n","import React from \"react\";\r\n\r\nexport default class CustomizedToolTip extends React.Component {\r\n\r\n    render() {\r\n        const { active } = this.props;\r\n\r\n        if (active) {\r\n            // console.log(\"tooltip\", this.props);\r\n\r\n            const { payload, label } = this.props;\r\n\r\n            return (\r\n\r\n                <div className=\"custom-tooltip\">\r\n                    <div className=\"Countylabel\">{ `County: ${payload[0].payload.County}`}</div>\r\n                    <div className=\"Incomelabel\">{ `Median Income: ${payload[0].value}`}</div>\r\n                    <div className=\"Populationlabel\">{ `Population: ${payload[1].value}`}</div>\r\n                    <div className=\"caseslabel\">{ `Number of Positive Cases: ${payload[2].value}`}</div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    }\r\n};\r\n\r\n","import React from \"react\";\n\n\nexport default class BubbleXTick extends React.Component {\n    convertValues(labelValue) {\n        // Nine Zeroes for Billions\n        return Math.abs(Number(labelValue)) >= 1.0e+9\n            ? Math.abs(Number(labelValue)) / 1.0e+9 + \"B\"\n            // Six Zeroes for Millions\n            : Math.abs(Number(labelValue)) >= 1.0e+6\n                ? Math.abs(Number(labelValue)) / 1.0e+6 + \"M\"\n                // Three Zeroes for Thousands\n                : Math.abs(Number(labelValue)) >= 1.0e+3\n                    ? Math.abs(Number(labelValue)) / 1.0e+3 + \"K\"\n                    : Math.abs(Number(labelValue));\n    }\n\n    render() {\n        const {x, y, stroke, payload} = this.props;\n\n        return (\n            <g transform={`translate(${x},${y})`}>\n                <text x={-10} y={0} dx={20} dy={10} textAnchor=\"end\" fill=\"white\" style={{\n                    fontSize: '12px'\n                }}>{this.convertValues(payload.value)}</text>\n            </g>\n        );\n    }\n};\n\n","import React from \"react\";\n\n\nexport default class BubbleYTick extends React.Component {\n    convertValues(labelValue) {\n        // Nine Zeroes for Billions\n        return Math.abs(Number(labelValue)) >= 1.0e+9\n            ? Math.abs(Number(labelValue)) / 1.0e+9 + \"B\"\n            // Six Zeroes for Millions\n            : Math.abs(Number(labelValue)) >= 1.0e+6\n                ? Math.abs(Number(labelValue)) / 1.0e+6 + \"M\"\n                // Three Zeroes for Thousands\n                : Math.abs(Number(labelValue)) >= 1.0e+3\n                    ? Math.abs(Number(labelValue)) / 1.0e+3 + \"K\"\n                    : Math.abs(Number(labelValue));\n    }\n\n    render() {\n        const {x, y, stroke, payload} = this.props;\n\n        return (\n            <g transform={`translate(${x},${y})`}>\n                <text x={0} y={10} dx={0} dy={-5} textAnchor=\"end\" fill=\"white\" style={{\n                    fontSize: '12px'\n                }}>{this.convertValues(payload.value)}</text>\n            </g>\n        );\n    }\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}